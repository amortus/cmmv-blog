import {
    Service, Config
} from "@cmmv/core";

import {
    Repository
} from "@cmmv/repository";

@Service("affiliate-sitemap")
export class AffiliateSitemapService {

    /**
     * Generate the sitemap index
     * @returns {Promise<string>}
     */
    async generateSitemapIndex() {
        const apiUrl = Config.get<string>("blog.url", process.env.API_URL);
        let sitemapIndex = [`<?xml version="1.0" encoding="UTF-8"?>`];//<?xml-stylesheet type="text/xsl" href="//andreferreira.com.br/main-sitemap.xsl"?>
        sitemapIndex.push(`<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">`);

        const AffiliateCampaignsEntity = Repository.getEntity("AffiliateCampaignsEntity");
        const AffiliateCategoriesEntity = Repository.getEntity("AffiliateCategoriesEntity");

        const campaign = await Repository.findAll(AffiliateCampaignsEntity, {
            active: true,
            limit: 1
        }, [], {
            select: ["updatedAt"]
        });

        const category = await Repository.findAll(AffiliateCategoriesEntity, {
            active: true,
            limit: 1
        }, [], {
            select: ["updatedAt"]
        });

        if(campaign && campaign.data.length > 0){
            sitemapIndex.push(
                `\t<sitemap>`,
                    `\t\t<loc>${apiUrl}/affiliate/affiliate-campaign-sitemap.xml</loc>`,
                    `\t\t<lastmod>${campaign.data[0]?.updatedAt.toISOString()}</lastmod>`,
                `\t</sitemap>`
            );
        }

        if(category && category.data.length > 0){
            sitemapIndex.push(
                `\t<sitemap>`,
                    `\t\t<loc>${apiUrl}/affiliate/affiliate-category-sitemap.xml</loc>`,
                    `\t\t<lastmod>${category.data[0].updatedAt.toISOString()}</lastmod>`,
                `\t</sitemap>`
            );
        }

        sitemapIndex.push(`</sitemapindex>`);
        sitemapIndex.push(`<!-- XML Sitemap generated by CMMV - cmmv.io -->`);

        return sitemapIndex.join("\n");
    }

    /**
     * Get the campaign sitemap
     * @returns {Promise<string>}
     */
    async getCampaignSitemap(){
        const apiUrl = Config.get<string>("blog.url", process.env.API_URL);
        let sitemapIndex = [`<?xml version="1.0" encoding="UTF-8"?>`];//<?xml-stylesheet type="text/xsl" href="//andreferreira.com.br/main-sitemap.xsl"?>
        sitemapIndex.push(`<urlset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1" xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd http://www.google.com/schemas/sitemap-image/1.1 http://www.google.com/schemas/sitemap-image/1.1/sitemap-image.xsd" xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">`);

        const AffiliateCampaignsEntity = Repository.getEntity("AffiliateCampaignsEntity");

        const campaigns = await Repository.findAll(AffiliateCampaignsEntity, {
            active: true,
            sortBy: "updatedAt",
            sort: "desc",
            limit: 100000
        }, [], {
            select: ["updatedAt", "slug", "logo", "name"]
        });

        if(campaigns){
            for(const campaign of campaigns.data){
                try{
                    if(campaign.logo) {
                        sitemapIndex.push(
                            `\t<url>`,
                                `\t\t<loc>${apiUrl}/desconto/${campaign.slug}</loc>`,
                                `\t\t<lastmod>${campaign.updatedAt.toISOString()}</lastmod>`,
                                `\t\t<image:image>`,
                                    `\t\t\t<image:loc>${campaign.logo}</image:loc>`,
                                    `\t\t\t<image:caption>${campaign.name}</image:caption>`,
                                `\t\t</image:image>`,
                            `\t</url>`
                        );
                    } else {
                        sitemapIndex.push(
                            `\t<url>`,
                                `\t\t<loc>${apiUrl}/desconto/${campaign.slug}</loc>`,
                                `\t\t<lastmod>${campaign.updatedAt.toISOString()}</lastmod>`,
                            `\t</url>`
                        );
                    }
                }catch(e){}
            }
        }

        sitemapIndex.push(`</urlset>`);
        sitemapIndex.push(`<!-- XML Sitemap generated by CMMV - cmmv.io -->`);

        return sitemapIndex.join("\n");
    }

    /**
     * Get the category sitemap
     * @returns {Promise<string>}
     */
    async getCategorySitemap(){
        const apiUrl = Config.get<string>("blog.url", process.env.API_URL);
        let sitemapIndex = [`<?xml version="1.0" encoding="UTF-8"?>`];//<?xml-stylesheet type="text/xsl" href="//andreferreira.com.br/main-sitemap.xsl"?>
        sitemapIndex.push(`<urlset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1" xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd http://www.google.com/schemas/sitemap-image/1.1 http://www.google.com/schemas/sitemap-image/1.1/sitemap-image.xsd" xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">`);

        const AffiliateCategoriesEntity = Repository.getEntity("AffiliateCategoriesEntity");

        const categories = await Repository.findAll(AffiliateCategoriesEntity, {
            active: true,
            sortBy: "updatedAt",
            sort: "desc",
            limit: 100000
        });

        if(categories){
            for(const category of categories.data){
                try{
                    sitemapIndex.push(`<url>`,
                        `<loc>${apiUrl}/cupom/${category.slug}</loc>`,
                        `<lastmod>${category.updatedAt.toISOString()}</lastmod>`,
                    `</url>`);
                }catch(e){}
            }
        }

        sitemapIndex.push(`</urlset>`);
        sitemapIndex.push(`<!-- XML Sitemap generated by CMMV - cmmv.io -->`);

        return sitemapIndex.join("\n");
    }
}
